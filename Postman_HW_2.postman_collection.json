{
	"info": {
		"_postman_id": "74265b3f-f0ca-41aa-a8ad-d4413ff6e597",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"pm.test(\"String comes in the body\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your name\", function () {\r",
							"pm.expect(jsonData.name).to.eql(\"Olga\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request  (age вбить руками.)\r",
							"pm.test(\"Your age\", function () {\r",
							"pm.expect(jsonData.age).to.eql(\"34\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request  (salary вбить руками.)\r",
							"pm.test(\"Your salary\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(10000);\r",
							"});\r",
							"\r",
							"// Спарсить request\r",
							"var reqBody = request.data;\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request \r",
							"pm.test(\"Name response = name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request \r",
							"pm.test(\"Age response = age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqBody.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request \r",
							"pm.test(\"Salary response = salary request\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(+reqBody.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(pm.response.json().family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"U salary 1,5 year in response is salary*4 in request\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqBody.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response is name request\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age response is age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary response is salary request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(\"Family = \", jsonData.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name is Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age is 4\", function () {\r",
							"    pm.expect(parseInt(jsonData.family.pets.dog.age)).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Bohdan&age=18&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Bohdan"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name is request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age response is age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary);\r",
							"\r",
							"//  Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"//  Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary-20000 response is salary-20000 request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary-40000 response is salary*2 request\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqData.salary*2);\r",
							"});\r",
							"\r",
							"//  Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary-60000 response is salary*3 request\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqData.salary*3);\r",
							"});\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"var userName = jsonData.name;\r",
							"console.log(userName);\r",
							"pm.environment.set(\"name\", userName);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"var userAge = jsonData.age;\r",
							"console.log(userAge);\r",
							"pm.environment.set(\"age\",userAge);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"var userSalary = jsonData.salary[0];\r",
							"console.log(userSalary);\r",
							"pm.environment.set(\"salary\",userSalary);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var salary = jsonData.salary\r",
							"console.log(salary)\r",
							"\r",
							"for(var i=0; i < salary.length; i++) {\r",
							"    console.log(i, salary[i])\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Alex&age=42&salary=20000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "42"
						},
						{
							"key": "salary",
							"value": "20000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var reqData = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Json respose has start_qa_salary\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Json response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Json response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Json response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Json response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Json response has person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start_qa_salary is requet salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_6_months is request salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_12_months is request salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_1.5_year is request salary*3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(reqData.salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_3.5_year is request salary*3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(reqData.salary*3.8);\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"In parameter person, 1st item from u_name is salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age parameter is equal to age from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"The u_salary_5_years parameter is salary * 4.2 from request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"//  ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for(var key in jsonData.person){\r",
							"    console.log(key, jsonData.person[key])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}